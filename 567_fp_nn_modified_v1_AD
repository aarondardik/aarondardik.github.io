{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aarondardik/aarondardik.github.io/blob/main/567_fp_nn_modified_v1_AD\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8sL7HF6h2y1c"
      },
      "source": [
        "NN with keras for classifiying damage grade  to buildings\n",
        "\n",
        "Setup:\n",
        "Select Runtime from the menu and Change the runtime type. Choose GPU from the Hardware accelerator options - click save\n",
        "\n",
        "multi-class\n",
        "output- damage grade (1,2,3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "C02V09Rb4Ob2"
      },
      "outputs": [],
      "source": [
        "from pathlib import Path\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ha1-tkgUKabr",
        "outputId": "93a34672-4da1-48de-c9f9-0a3f9b688b64"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# convert csv to dataframe\n",
        "x = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/567_Data/train_values.csv',index_col='building_id')\n",
        "y = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/567_Data/train_labels.csv',index_col='building_id')\n",
        "x_comp_test = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/567_Data/test_values.csv',index_col='building_id')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "we-GFtLFIUM_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "4cde67b0-f6f3-444d-824a-840bd057bbb5"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "(260601, 38)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "(260601, 27)"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "# select features\n",
        "\n",
        "selected_features = ['geo_level_1_id',\n",
        "                     'geo_level_2_id',\n",
        "                     'geo_level_3_id',\n",
        "                     'count_floors_pre_eq',\n",
        "                     'age',\n",
        "                     'area_percentage', \n",
        "                     'height_percentage',\n",
        "                     'land_surface_condition',\n",
        "                     'foundation_type',\n",
        "                     'roof_type',\n",
        "                     'ground_floor_type',\n",
        "                     'position',\n",
        "                     'plan_configuration',\n",
        "                     'has_superstructure_adobe_mud',\n",
        "                     'has_superstructure_mud_mortar_stone',\n",
        "                     'has_superstructure_stone_flag',\n",
        "                     'has_superstructure_cement_mortar_stone',\n",
        "                     'has_superstructure_mud_mortar_brick',\n",
        "                     'has_superstructure_cement_mortar_brick',\n",
        "                     'has_superstructure_timber',\n",
        "                     'has_superstructure_bamboo',\n",
        "                     'has_superstructure_rc_non_engineered',\n",
        "                     'has_superstructure_rc_engineered',\n",
        "                     'has_superstructure_other',\n",
        "                     'legal_ownership_status',\n",
        "                     'count_families',\n",
        "                     'has_secondary_use']\n",
        "\n",
        "\n",
        "x_subfeatures = x[selected_features]\n",
        "#if want all features\n",
        "#x_subfeatures =x\n",
        "display(x.shape)\n",
        "display(x_subfeatures.shape)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "nhWkg5pfkMnb"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.base import BaseEstimator, TransformerMixin\n",
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler, MinMaxScaler\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline, make_pipeline, FeatureUnion\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "\n",
        "from sklearn.metrics import f1_score\n",
        "\n",
        "\n",
        "from timeit import default_timer as timer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 943
        },
        "id": "6xsmMuvRQTnW",
        "outputId": "58669181-043e-4dcf-a2ee-b77e755cf456"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "******************** Training data ********************\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             geo_level_1_id  geo_level_2_id  geo_level_3_id  \\\n",
              "building_id                                                   \n",
              "802906                    6             487           12198   \n",
              "28830                     8             900            2812   \n",
              "94947                    21             363            8973   \n",
              "590882                   22             418           10694   \n",
              "201944                   11             131            1488   \n",
              "...                     ...             ...             ...   \n",
              "688636                   25            1335            1621   \n",
              "669485                   17             715            2060   \n",
              "602512                   17              51            8163   \n",
              "151409                   26              39            1851   \n",
              "747594                   21               9            9101   \n",
              "\n",
              "             count_floors_pre_eq  age  area_percentage  height_percentage  \\\n",
              "building_id                                                                 \n",
              "802906                         2   30                6                  5   \n",
              "28830                          2   10                8                  7   \n",
              "94947                          2   10                5                  5   \n",
              "590882                         2   10                6                  5   \n",
              "201944                         3   30                8                  9   \n",
              "...                          ...  ...              ...                ...   \n",
              "688636                         1   55                6                  3   \n",
              "669485                         2    0                6                  5   \n",
              "602512                         3   55                6                  7   \n",
              "151409                         2   10               14                  6   \n",
              "747594                         3   10                7                  6   \n",
              "\n",
              "            land_surface_condition foundation_type roof_type  ...  \\\n",
              "building_id                                                   ...   \n",
              "802906                           t               r         n  ...   \n",
              "28830                            o               r         n  ...   \n",
              "94947                            t               r         n  ...   \n",
              "590882                           t               r         n  ...   \n",
              "201944                           t               r         n  ...   \n",
              "...                            ...             ...       ...  ...   \n",
              "688636                           n               r         n  ...   \n",
              "669485                           t               r         n  ...   \n",
              "602512                           t               r         q  ...   \n",
              "151409                           t               r         x  ...   \n",
              "747594                           n               r         n  ...   \n",
              "\n",
              "            has_superstructure_mud_mortar_brick  \\\n",
              "building_id                                       \n",
              "802906                                        0   \n",
              "28830                                         0   \n",
              "94947                                         0   \n",
              "590882                                        0   \n",
              "201944                                        0   \n",
              "...                                         ...   \n",
              "688636                                        0   \n",
              "669485                                        0   \n",
              "602512                                        0   \n",
              "151409                                        0   \n",
              "747594                                        0   \n",
              "\n",
              "            has_superstructure_cement_mortar_brick has_superstructure_timber  \\\n",
              "building_id                                                                    \n",
              "802906                                           0                         0   \n",
              "28830                                            0                         0   \n",
              "94947                                            0                         0   \n",
              "590882                                           0                         1   \n",
              "201944                                           0                         0   \n",
              "...                                            ...                       ...   \n",
              "688636                                           0                         0   \n",
              "669485                                           0                         0   \n",
              "602512                                           0                         0   \n",
              "151409                                           1                         0   \n",
              "747594                                           0                         0   \n",
              "\n",
              "             has_superstructure_bamboo  has_superstructure_rc_non_engineered  \\\n",
              "building_id                                                                    \n",
              "802906                               0                                     0   \n",
              "28830                                0                                     0   \n",
              "94947                                0                                     0   \n",
              "590882                               1                                     0   \n",
              "201944                               0                                     0   \n",
              "...                                ...                                   ...   \n",
              "688636                               0                                     0   \n",
              "669485                               0                                     0   \n",
              "602512                               0                                     0   \n",
              "151409                               0                                     0   \n",
              "747594                               0                                     0   \n",
              "\n",
              "             has_superstructure_rc_engineered  has_superstructure_other  \\\n",
              "building_id                                                               \n",
              "802906                                      0                         0   \n",
              "28830                                       0                         0   \n",
              "94947                                       0                         0   \n",
              "590882                                      0                         0   \n",
              "201944                                      0                         0   \n",
              "...                                       ...                       ...   \n",
              "688636                                      0                         0   \n",
              "669485                                      0                         0   \n",
              "602512                                      0                         0   \n",
              "151409                                      0                         0   \n",
              "747594                                      0                         0   \n",
              "\n",
              "             legal_ownership_status  count_families  has_secondary_use  \n",
              "building_id                                                             \n",
              "802906                            v               1                  0  \n",
              "28830                             v               1                  0  \n",
              "94947                             v               1                  0  \n",
              "590882                            v               1                  0  \n",
              "201944                            v               1                  0  \n",
              "...                             ...             ...                ...  \n",
              "688636                            v               1                  0  \n",
              "669485                            v               1                  0  \n",
              "602512                            v               1                  0  \n",
              "151409                            v               1                  0  \n",
              "747594                            v               3                  0  \n",
              "\n",
              "[260601 rows x 27 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a990f8d3-ed03-4845-ad60-b078e9ae0d65\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geo_level_1_id</th>\n",
              "      <th>geo_level_2_id</th>\n",
              "      <th>geo_level_3_id</th>\n",
              "      <th>count_floors_pre_eq</th>\n",
              "      <th>age</th>\n",
              "      <th>area_percentage</th>\n",
              "      <th>height_percentage</th>\n",
              "      <th>land_surface_condition</th>\n",
              "      <th>foundation_type</th>\n",
              "      <th>roof_type</th>\n",
              "      <th>...</th>\n",
              "      <th>has_superstructure_mud_mortar_brick</th>\n",
              "      <th>has_superstructure_cement_mortar_brick</th>\n",
              "      <th>has_superstructure_timber</th>\n",
              "      <th>has_superstructure_bamboo</th>\n",
              "      <th>has_superstructure_rc_non_engineered</th>\n",
              "      <th>has_superstructure_rc_engineered</th>\n",
              "      <th>has_superstructure_other</th>\n",
              "      <th>legal_ownership_status</th>\n",
              "      <th>count_families</th>\n",
              "      <th>has_secondary_use</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>building_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>802906</th>\n",
              "      <td>6</td>\n",
              "      <td>487</td>\n",
              "      <td>12198</td>\n",
              "      <td>2</td>\n",
              "      <td>30</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>t</td>\n",
              "      <td>r</td>\n",
              "      <td>n</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>v</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28830</th>\n",
              "      <td>8</td>\n",
              "      <td>900</td>\n",
              "      <td>2812</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>o</td>\n",
              "      <td>r</td>\n",
              "      <td>n</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>v</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94947</th>\n",
              "      <td>21</td>\n",
              "      <td>363</td>\n",
              "      <td>8973</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>t</td>\n",
              "      <td>r</td>\n",
              "      <td>n</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>v</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590882</th>\n",
              "      <td>22</td>\n",
              "      <td>418</td>\n",
              "      <td>10694</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>t</td>\n",
              "      <td>r</td>\n",
              "      <td>n</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>v</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>201944</th>\n",
              "      <td>11</td>\n",
              "      <td>131</td>\n",
              "      <td>1488</td>\n",
              "      <td>3</td>\n",
              "      <td>30</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>t</td>\n",
              "      <td>r</td>\n",
              "      <td>n</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>v</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>688636</th>\n",
              "      <td>25</td>\n",
              "      <td>1335</td>\n",
              "      <td>1621</td>\n",
              "      <td>1</td>\n",
              "      <td>55</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>n</td>\n",
              "      <td>r</td>\n",
              "      <td>n</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>v</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>669485</th>\n",
              "      <td>17</td>\n",
              "      <td>715</td>\n",
              "      <td>2060</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>t</td>\n",
              "      <td>r</td>\n",
              "      <td>n</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>v</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>602512</th>\n",
              "      <td>17</td>\n",
              "      <td>51</td>\n",
              "      <td>8163</td>\n",
              "      <td>3</td>\n",
              "      <td>55</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>t</td>\n",
              "      <td>r</td>\n",
              "      <td>q</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>v</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>151409</th>\n",
              "      <td>26</td>\n",
              "      <td>39</td>\n",
              "      <td>1851</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>14</td>\n",
              "      <td>6</td>\n",
              "      <td>t</td>\n",
              "      <td>r</td>\n",
              "      <td>x</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>v</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>747594</th>\n",
              "      <td>21</td>\n",
              "      <td>9</td>\n",
              "      <td>9101</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>n</td>\n",
              "      <td>r</td>\n",
              "      <td>n</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>v</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>260601 rows × 27 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a990f8d3-ed03-4845-ad60-b078e9ae0d65')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a990f8d3-ed03-4845-ad60-b078e9ae0d65 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a990f8d3-ed03-4845-ad60-b078e9ae0d65');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "        land_surface_condition_n  land_surface_condition_o  \\\n",
              "0                      -0.983414                 -0.518705   \n",
              "1                      -0.734459                  0.481998   \n",
              "2                       0.883744                 -0.819158   \n",
              "3                       1.008221                 -0.685893   \n",
              "4                      -0.361028                 -1.381296   \n",
              "...                          ...                       ...   \n",
              "260596                  1.381653                  1.536007   \n",
              "260597                  0.385835                  0.033741   \n",
              "260598                  0.385835                 -1.575137   \n",
              "260599                  1.506130                 -1.604213   \n",
              "260600                  0.883744                 -1.676903   \n",
              "\n",
              "        land_surface_condition_t  foundation_type_h  foundation_type_i  \\\n",
              "0                       1.629055          -0.178274           0.047100   \n",
              "1                      -0.945017          -0.178274          -0.224765   \n",
              "2                       0.744612          -0.178274          -0.224765   \n",
              "3                       1.216589          -0.178274          -0.224765   \n",
              "4                      -1.308119           1.195989           0.047100   \n",
              "...                          ...                ...                ...   \n",
              "260596                 -1.271644          -1.552536           0.386932   \n",
              "260597                 -1.151250          -0.178274          -0.360698   \n",
              "260598                  0.522472           1.195989           0.386932   \n",
              "260599                 -1.208568          -0.178274          -0.224765   \n",
              "260600                  0.779715           1.195989          -0.224765   \n",
              "\n",
              "        foundation_type_r  foundation_type_u  foundation_type_w  roof_type_n  \\\n",
              "0               -0.459460          -0.226419           3.206391     0.558971   \n",
              "1               -0.004110           0.816109          -0.311877     0.558971   \n",
              "2               -0.687135          -0.226419          -0.311877     0.558971   \n",
              "3               -0.459460          -0.226419          -0.311877     0.558971   \n",
              "4               -0.004110           1.858636           3.206391    -1.789003   \n",
              "...                   ...                ...                ...          ...   \n",
              "260596          -0.459460          -1.268946          -0.311877     0.558971   \n",
              "260597          -0.459460          -0.226419          -0.311877     0.558971   \n",
              "260598          -0.459460           0.816109          -0.311877     0.558971   \n",
              "260599           1.361941           0.294845          -0.311877    -1.789003   \n",
              "260600          -0.231785           0.294845          -0.311877     0.558971   \n",
              "\n",
              "        roof_type_q  ...  has_superstructure_cement_mortar_stone  \\\n",
              "0         -0.188554  ...                                     0.0   \n",
              "1         -0.188554  ...                                     0.0   \n",
              "2         -0.188554  ...                                     0.0   \n",
              "3         -0.188554  ...                                     0.0   \n",
              "4         -0.188554  ...                                     0.0   \n",
              "...             ...  ...                                     ...   \n",
              "260596    -0.188554  ...                                     0.0   \n",
              "260597    -0.188554  ...                                     0.0   \n",
              "260598    -0.188554  ...                                     0.0   \n",
              "260599    -0.188554  ...                                     0.0   \n",
              "260600    -0.188554  ...                                     0.0   \n",
              "\n",
              "        has_superstructure_mud_mortar_brick  \\\n",
              "0                                       0.0   \n",
              "1                                       0.0   \n",
              "2                                       0.0   \n",
              "3                                       0.0   \n",
              "4                                       0.0   \n",
              "...                                     ...   \n",
              "260596                                  0.0   \n",
              "260597                                  0.0   \n",
              "260598                                  0.0   \n",
              "260599                                  0.0   \n",
              "260600                                  0.0   \n",
              "\n",
              "        has_superstructure_cement_mortar_brick  has_superstructure_timber  \\\n",
              "0                                          0.0                        0.0   \n",
              "1                                          0.0                        0.0   \n",
              "2                                          0.0                        0.0   \n",
              "3                                          0.0                        0.0   \n",
              "4                                          0.0                        0.0   \n",
              "...                                        ...                        ...   \n",
              "260596                                     0.0                        1.0   \n",
              "260597                                     0.0                        0.0   \n",
              "260598                                     0.0                        0.0   \n",
              "260599                                     0.0                        0.0   \n",
              "260600                                     0.0                        0.0   \n",
              "\n",
              "        has_superstructure_bamboo  has_superstructure_rc_non_engineered  \\\n",
              "0                             0.0                                   0.0   \n",
              "1                             0.0                                   0.0   \n",
              "2                             0.0                                   0.0   \n",
              "3                             0.0                                   0.0   \n",
              "4                             0.0                                   0.0   \n",
              "...                           ...                                   ...   \n",
              "260596                        0.0                                   0.0   \n",
              "260597                        0.0                                   0.0   \n",
              "260598                        0.0                                   0.0   \n",
              "260599                        0.0                                   0.0   \n",
              "260600                        0.0                                   0.0   \n",
              "\n",
              "        has_superstructure_rc_engineered  has_superstructure_other  \\\n",
              "0                                    0.0                       0.0   \n",
              "1                                    0.0                       0.0   \n",
              "2                                    0.0                       0.0   \n",
              "3                                    0.0                       0.0   \n",
              "4                                    0.0                       0.0   \n",
              "...                                  ...                       ...   \n",
              "260596                               0.0                       0.0   \n",
              "260597                               0.0                       0.0   \n",
              "260598                               0.0                       0.0   \n",
              "260599                               0.0                       0.0   \n",
              "260600                               0.0                       0.0   \n",
              "\n",
              "        count_families  has_secondary_use  \n",
              "0                  1.0                0.0  \n",
              "1                  1.0                0.0  \n",
              "2                  1.0                0.0  \n",
              "3                  1.0                0.0  \n",
              "4                  1.0                0.0  \n",
              "...                ...                ...  \n",
              "260596             1.0                0.0  \n",
              "260597             1.0                0.0  \n",
              "260598             1.0                0.0  \n",
              "260599             1.0                0.0  \n",
              "260600             1.0                0.0  \n",
              "\n",
              "[260601 rows x 54 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7f62dbda-1970-4fbd-a332-ebddac5d9211\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>land_surface_condition_n</th>\n",
              "      <th>land_surface_condition_o</th>\n",
              "      <th>land_surface_condition_t</th>\n",
              "      <th>foundation_type_h</th>\n",
              "      <th>foundation_type_i</th>\n",
              "      <th>foundation_type_r</th>\n",
              "      <th>foundation_type_u</th>\n",
              "      <th>foundation_type_w</th>\n",
              "      <th>roof_type_n</th>\n",
              "      <th>roof_type_q</th>\n",
              "      <th>...</th>\n",
              "      <th>has_superstructure_cement_mortar_stone</th>\n",
              "      <th>has_superstructure_mud_mortar_brick</th>\n",
              "      <th>has_superstructure_cement_mortar_brick</th>\n",
              "      <th>has_superstructure_timber</th>\n",
              "      <th>has_superstructure_bamboo</th>\n",
              "      <th>has_superstructure_rc_non_engineered</th>\n",
              "      <th>has_superstructure_rc_engineered</th>\n",
              "      <th>has_superstructure_other</th>\n",
              "      <th>count_families</th>\n",
              "      <th>has_secondary_use</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.983414</td>\n",
              "      <td>-0.518705</td>\n",
              "      <td>1.629055</td>\n",
              "      <td>-0.178274</td>\n",
              "      <td>0.047100</td>\n",
              "      <td>-0.459460</td>\n",
              "      <td>-0.226419</td>\n",
              "      <td>3.206391</td>\n",
              "      <td>0.558971</td>\n",
              "      <td>-0.188554</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.734459</td>\n",
              "      <td>0.481998</td>\n",
              "      <td>-0.945017</td>\n",
              "      <td>-0.178274</td>\n",
              "      <td>-0.224765</td>\n",
              "      <td>-0.004110</td>\n",
              "      <td>0.816109</td>\n",
              "      <td>-0.311877</td>\n",
              "      <td>0.558971</td>\n",
              "      <td>-0.188554</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.883744</td>\n",
              "      <td>-0.819158</td>\n",
              "      <td>0.744612</td>\n",
              "      <td>-0.178274</td>\n",
              "      <td>-0.224765</td>\n",
              "      <td>-0.687135</td>\n",
              "      <td>-0.226419</td>\n",
              "      <td>-0.311877</td>\n",
              "      <td>0.558971</td>\n",
              "      <td>-0.188554</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.008221</td>\n",
              "      <td>-0.685893</td>\n",
              "      <td>1.216589</td>\n",
              "      <td>-0.178274</td>\n",
              "      <td>-0.224765</td>\n",
              "      <td>-0.459460</td>\n",
              "      <td>-0.226419</td>\n",
              "      <td>-0.311877</td>\n",
              "      <td>0.558971</td>\n",
              "      <td>-0.188554</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.361028</td>\n",
              "      <td>-1.381296</td>\n",
              "      <td>-1.308119</td>\n",
              "      <td>1.195989</td>\n",
              "      <td>0.047100</td>\n",
              "      <td>-0.004110</td>\n",
              "      <td>1.858636</td>\n",
              "      <td>3.206391</td>\n",
              "      <td>-1.789003</td>\n",
              "      <td>-0.188554</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260596</th>\n",
              "      <td>1.381653</td>\n",
              "      <td>1.536007</td>\n",
              "      <td>-1.271644</td>\n",
              "      <td>-1.552536</td>\n",
              "      <td>0.386932</td>\n",
              "      <td>-0.459460</td>\n",
              "      <td>-1.268946</td>\n",
              "      <td>-0.311877</td>\n",
              "      <td>0.558971</td>\n",
              "      <td>-0.188554</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260597</th>\n",
              "      <td>0.385835</td>\n",
              "      <td>0.033741</td>\n",
              "      <td>-1.151250</td>\n",
              "      <td>-0.178274</td>\n",
              "      <td>-0.360698</td>\n",
              "      <td>-0.459460</td>\n",
              "      <td>-0.226419</td>\n",
              "      <td>-0.311877</td>\n",
              "      <td>0.558971</td>\n",
              "      <td>-0.188554</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260598</th>\n",
              "      <td>0.385835</td>\n",
              "      <td>-1.575137</td>\n",
              "      <td>0.522472</td>\n",
              "      <td>1.195989</td>\n",
              "      <td>0.386932</td>\n",
              "      <td>-0.459460</td>\n",
              "      <td>0.816109</td>\n",
              "      <td>-0.311877</td>\n",
              "      <td>0.558971</td>\n",
              "      <td>-0.188554</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260599</th>\n",
              "      <td>1.506130</td>\n",
              "      <td>-1.604213</td>\n",
              "      <td>-1.208568</td>\n",
              "      <td>-0.178274</td>\n",
              "      <td>-0.224765</td>\n",
              "      <td>1.361941</td>\n",
              "      <td>0.294845</td>\n",
              "      <td>-0.311877</td>\n",
              "      <td>-1.789003</td>\n",
              "      <td>-0.188554</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260600</th>\n",
              "      <td>0.883744</td>\n",
              "      <td>-1.676903</td>\n",
              "      <td>0.779715</td>\n",
              "      <td>1.195989</td>\n",
              "      <td>-0.224765</td>\n",
              "      <td>-0.231785</td>\n",
              "      <td>0.294845</td>\n",
              "      <td>-0.311877</td>\n",
              "      <td>0.558971</td>\n",
              "      <td>-0.188554</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>260601 rows × 54 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f62dbda-1970-4fbd-a332-ebddac5d9211')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7f62dbda-1970-4fbd-a332-ebddac5d9211 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7f62dbda-1970-4fbd-a332-ebddac5d9211');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "# get the categorical and numeric column names\n",
        "numerical = x_subfeatures.select_dtypes(exclude=['object']).columns.tolist()\n",
        "categorical = x_subfeatures.select_dtypes(include=['object']).columns.tolist()\n",
        "\n",
        "#pipeline numerical columns\n",
        "\n",
        "num_pipe = Pipeline ([\n",
        "  ('num_imputer', SimpleImputer (strategy= 'median')),\n",
        "  ('num_scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "#pipeline for categorical features\n",
        "#set to encode all nomial columns, use onehotencoder with all values since there didnt look like alot of categories in each\n",
        "cat_pipe = Pipeline ([\n",
        "  ('cat_imputer', SimpleImputer (strategy= 'constant', fill_value ='n/a')),\n",
        "  ('cat_encoder',  OneHotEncoder())\n",
        "])\n",
        "\n",
        "\n",
        "# Fit column transformer to training data\n",
        "preprocessor = ColumnTransformer([\n",
        "    ('num', num_pipe, numerical),\n",
        "    ('cat', cat_pipe, categorical)\n",
        "])\n",
        "\n",
        "preprocessor.fit_transform(x_subfeatures)\n",
        "\n",
        "#prepare label data-> convert to binary\n",
        "ohe = OneHotEncoder()\n",
        "y = ohe.fit_transform(y).toarray()\n",
        "\n",
        "\n",
        "# prepare column names\n",
        "cat_columns = preprocessor.named_transformers_['cat']['cat_encoder'].get_feature_names_out(categorical)\n",
        "columns = np.append(cat_columns, numerical) \n",
        "\n",
        "# Inspect training data before and after\n",
        "print(\"******************** Training data ********************\")\n",
        "display(x_subfeatures)\n",
        "display(pd.DataFrame(preprocessor.transform(x_subfeatures), columns=columns))\n",
        "x_subfeatures= preprocessor.transform(x_subfeatures)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_comp_test =  preprocessor.transform(x_comp_test)"
      ],
      "metadata": {
        "id": "H_N-pj7DYW3J"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "HFxrZw5OR-IG",
        "outputId": "3f204669-178c-4a47-f95d-a8b8127d3967"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "(260601, 54)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "(260601, 3)"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "x_train_subset= x_subfeatures\n",
        "y_train_subset= y\n",
        "\n",
        "# is this doing something wrong-> accuracy sits .5 so random guess\n",
        "#x_train_subset, x_test_subset, y_train_subset, y_test_subset = train_test_split( x_subfeatures, y, train_size=0.90, random_state=4)\n",
        "\n",
        "display(x_train_subset.shape)\n",
        "display(y.shape)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.layers.regularization.dropout import Dropout\n",
        "# build  NN\n",
        "import keras\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Activation, Dropout, Dense\n",
        "\n",
        "layer_nuerons = [np.shape(x_train_subset)[1], 60, 30, 30, 3 ]\n",
        "layer_activ = {0:'tanh', 1:'tanh', 2:'relu', 3:'relu', 4:'softmax'}\n",
        "\n",
        "# Neural network\n",
        "model = Sequential()\n",
        "model.add(Dense(layer_nuerons[0], input_dim= np.shape(x_train_subset)[1], activation= layer_activ[0]))\n",
        "\n",
        "model.add(Dense(layer_nuerons[1], activation=layer_activ[1]))\n",
        "model.add(Dropout(0.3))\n",
        "\n",
        "model.add(Dense(layer_nuerons[2], activation=layer_activ[2]))\n",
        "\n",
        "model.add(Dense(layer_nuerons[3], activation=layer_activ[3]))\n",
        "model.add(Dropout(0.3))\n",
        "\n",
        "model.add(Dense(layer_nuerons[4], activation='softmax'))\n",
        "\n",
        "model.compile(loss='categorical_crossentropy',\n",
        "              optimizer='adam',\n",
        "              metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "i1xUxOXt5zP2"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#train model\n",
        "from keras.callbacks import EarlyStopping\n",
        "from keras.callbacks import ModelCheckpoint\n",
        "from tensorflow import keras\n",
        "\n",
        "##model.summary()\n",
        "#early stop for large number of epochs\n",
        "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience =50)\n",
        "mc = ModelCheckpoint('best_model.h5', monitor='val_accuracy', mode='max', verbose=1, save_best_only=True)\n",
        "\n",
        "history = model.fit(x_train_subset, y_train_subset, validation_split = 0.1, epochs=400, batch_size=32, callbacks =[es,mc])\n",
        "\n",
        "saved_model = keras.models.load_model('best_model.h5')\n",
        "saved_model.save('/content/drive/My Drive/Colab Notebooks/cats-vs-dogs/CSCI567_nn_model.h5')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 763
        },
        "id": "F5gei9X19doD",
        "outputId": "969153d1-1f96-4b1c-afcc-2b8145daf21e"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/400\n",
            "7330/7330 [==============================] - ETA: 0s - loss: 0.7842 - accuracy: 0.6144\n",
            "Epoch 1: val_accuracy improved from -inf to 0.63789, saving model to best_model.h5\n",
            "7330/7330 [==============================] - 22s 3ms/step - loss: 0.7842 - accuracy: 0.6144 - val_loss: 0.7481 - val_accuracy: 0.6379\n",
            "Epoch 2/400\n",
            "7316/7330 [============================>.] - ETA: 0s - loss: 0.7495 - accuracy: 0.6338\n",
            "Epoch 2: val_accuracy improved from 0.63789 to 0.64529, saving model to best_model.h5\n",
            "7330/7330 [==============================] - 20s 3ms/step - loss: 0.7496 - accuracy: 0.6338 - val_loss: 0.7210 - val_accuracy: 0.6453\n",
            "Epoch 3/400\n",
            "7312/7330 [============================>.] - ETA: 0s - loss: 0.7384 - accuracy: 0.6415\n",
            "Epoch 3: val_accuracy improved from 0.64529 to 0.65439, saving model to best_model.h5\n",
            "7330/7330 [==============================] - 20s 3ms/step - loss: 0.7385 - accuracy: 0.6415 - val_loss: 0.7209 - val_accuracy: 0.6544\n",
            "Epoch 4/400\n",
            "7329/7330 [============================>.] - ETA: 0s - loss: 0.7325 - accuracy: 0.6459\n",
            "Epoch 4: val_accuracy improved from 0.65439 to 0.66145, saving model to best_model.h5\n",
            "7330/7330 [==============================] - 21s 3ms/step - loss: 0.7325 - accuracy: 0.6459 - val_loss: 0.7110 - val_accuracy: 0.6614\n",
            "Epoch 5/400\n",
            "7316/7330 [============================>.] - ETA: 0s - loss: 0.7267 - accuracy: 0.6525\n",
            "Epoch 5: val_accuracy improved from 0.66145 to 0.66256, saving model to best_model.h5\n",
            "7330/7330 [==============================] - 20s 3ms/step - loss: 0.7267 - accuracy: 0.6525 - val_loss: 0.7098 - val_accuracy: 0.6626\n",
            "Epoch 6/400\n",
            "3388/7330 [============>.................] - ETA: 10s - loss: 0.7234 - accuracy: 0.6522"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-22e080964a36>\u001b[0m in \u001b[0;36m<cell line: 11>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mmc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mModelCheckpoint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'best_model.h5'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmonitor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'val_accuracy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'max'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msave_best_only\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train_subset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_subset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_split\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m400\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mes\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0msaved_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'best_model.h5'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1683\u001b[0m                         ):\n\u001b[1;32m   1684\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1685\u001b[0;31m                             \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1686\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1687\u001b[0m                                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    892\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    893\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 894\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    895\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    896\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    924\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    925\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 926\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_no_variable_creation_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    927\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variable_creation_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    928\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compiler.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    141\u001b[0m       (concrete_function,\n\u001b[1;32m    142\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0;32m--> 143\u001b[0;31m     return concrete_function._call_flat(\n\u001b[0m\u001b[1;32m    144\u001b[0m         filtered_flat_args, captured_inputs=concrete_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[1;32m    145\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1755\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1756\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1757\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1758\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1759\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    379\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 381\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    382\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     50\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     53\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     54\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Epoch 6: val accuracy did not improve from 0.54645\n",
        "\n",
        "Epoch 251: val_accuracy did not improve from 0.69345\n",
        "7330/7330 [==============================] - 25s 3ms/step - loss: 0.4177 - accuracy: 0.7007 - val_loss: 0.4269 - val_accuracy: 0.6906\n",
        "Epoch 251: early stopping"
      ],
      "metadata": {
        "id": "Ee1ZjjF3VZPv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# predict and test\n",
        "\n",
        "y_pred = saved_model.predict(x_train_subset)\n",
        "\n",
        "\n",
        "#Converting predictions to label\n",
        "pred = list()\n",
        "for i in range(len(y_pred)):\n",
        "    pred.append(np.argmax(y_pred[i]))\n",
        "#Converting one hot encoded test label to label\n",
        "test = list()\n",
        "for i in range(len(y_train_subset)):\n",
        "    test.append(np.argmax(y_train_subset[i]))\n",
        "\n",
        "score = f1_score(test, pred, average='micro')\n",
        "print(\"NN Score  f1 score: %.3f\" %  score)\n",
        "\n"
      ],
      "metadata": {
        "id": "3096Xpj99daz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b14b3bc3-a74b-47ac-8fcc-abf0482f2290"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8144/8144 [==============================] - 13s 2ms/step\n",
            "NN Score  f1 score: 0.709\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8144/8144 [==============================] - 14s 2ms/step\n",
        "NN Score f1 score: 0.712"
      ],
      "metadata": {
        "id": "JxIbVhanXW98"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for key in history.history.keys():\n",
        "    print(key)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nOQ_l_OinD_i",
        "outputId": "e1849779-a30d-4d11-ac91-3bde0ac7804c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "loss\n",
            "accuracy\n",
            "val_loss\n",
            "val_accuracy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#view model accuracy \n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('Model accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Test'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "aY26LwNBDObS",
        "outputId": "4ad3543a-2da2-4c6e-a29e-eb5870f3c1ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-a8441ab720a6>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#view model accuracy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'val_accuracy'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Model accuracy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'history' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#view model loss\n",
        "plt.plot(history.history['loss']) \n",
        "plt.plot(history.history['val_loss']) \n",
        "plt.title('Model loss') \n",
        "plt.ylabel('Loss') \n",
        "plt.xlabel('Epoch') \n",
        "plt.legend(['Train', 'Test'], loc='upper left') \n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "HnSo6xAMDblq",
        "outputId": "a1af4c6e-f556-4fe5-84cc-715461de72c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkAAAAHHCAYAAABXx+fLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACPaElEQVR4nO3dd3gU1foH8O+W9EpIh0BCDTUgJSJdIkWko4hcQES8FmwIP8UCgteLFbGCcmkqCmIBREHp0nvoBAiEhJDeC2m78/vj7OzsppG6S5Lv53nybDI7Mzk72ey++573nKOSJEkCERERUQOitnYDiIiIiCyNARARERE1OAyAiIiIqMFhAEREREQNDgMgIiIianAYABEREVGDwwCIiIiIGhwGQERERNTgMAAiIiKiBocBEBHVeSqVCm+//Xalj4uKioJKpcLq1avL3W/Pnj1QqVTYs2dPldpHRHcfBkBEVCNWr14NlUoFlUqF/fv3l7hfkiQEBARApVLhoYceskILiYgUDICIqEbZ29vjhx9+KLF97969uHnzJuzs7KzQKiIicwyAiKhGPfjgg9iwYQOKiorMtv/www/o1q0bfH19rdQyIiIFAyAiqlETJ05ESkoKtm/fbtxWUFCAn3/+GY899lipx+Tk5OCVV15BQEAA7Ozs0LZtW3z00UeQJMlsv/z8fLz88svw8vKCi4sLRo4ciZs3b5Z6ztjYWDzxxBPw8fGBnZ0dOnTogJUrV9bcAwWwYcMGdOvWDQ4ODvD09MS//vUvxMbGmu0THx+PadOmoWnTprCzs4Ofnx9GjRqFqKgo4z7Hjx/HkCFD4OnpCQcHBwQFBeGJJ56o0bYSkTmttRtARPVLYGAgevXqhR9//BHDhg0DAGzduhUZGRl49NFH8dlnn5ntL0kSRo4cid27d2P69Ono0qUL/vrrL8yZMwexsbH45JNPjPs++eST+P777/HYY4/hvvvuw65duzB8+PASbUhISMC9994LlUqFmTNnwsvLC1u3bsX06dORmZmJl156qdqPc/Xq1Zg2bRp69OiBRYsWISEhAZ9++ikOHDiAU6dOwd3dHQAwbtw4nD9/Hs8//zwCAwORmJiI7du3Izo62vjz4MGD4eXlhddeew3u7u6IiorCr7/+Wu02ElE5JCKiGrBq1SoJgHTs2DHpiy++kFxcXKTc3FxJkiTp4YcflgYOHChJkiQ1b95cGj58uPG4jRs3SgCk//znP2bnGz9+vKRSqaSrV69KkiRJ4eHhEgDp2WefNdvvsccekwBI8+fPN26bPn265OfnJyUnJ5vt++ijj0pubm7Gdl2/fl0CIK1atarcx7Z7924JgLR7925JkiSpoKBA8vb2ljp27Cjdvn3buN+WLVskANK8efMkSZKktLQ0CYD04Ycflnnu3377zXjdiMhy2AVGRDXukUcewe3bt7FlyxZkZWVhy5YtZXZ//fnnn9BoNHjhhRfMtr/yyiuQJAlbt2417gegxH7FszmSJOGXX37BiBEjIEkSkpOTjV9DhgxBRkYGTp48Wa3Hd/z4cSQmJuLZZ5+Fvb29cfvw4cMRHByMP/74AwDg4OAAW1tb7NmzB2lpaaWeS84UbdmyBYWFhdVqFxFVHAMgIqpxXl5eCAsLww8//IBff/0VOp0O48ePL3XfGzduwN/fHy4uLmbb27VrZ7xfvlWr1WjZsqXZfm3btjX7OSkpCenp6fjmm2/g5eVl9jVt2jQAQGJiYrUen9ym4r8bAIKDg43329nZ4f3338fWrVvh4+ODfv364YMPPkB8fLxx//79+2PcuHFYsGABPD09MWrUKKxatQr5+fnVaiMRlY81QERUKx577DHMmDED8fHxGDZsmDHTUdv0ej0A4F//+hemTp1a6j6dO3e2SFsAkaEaMWIENm7ciL/++gtvvfUWFi1ahF27dqFr165QqVT4+eefcfjwYfz+++/466+/8MQTT+Djjz/G4cOH4ezsbLG2EjUkzAARUa0YM2YM1Go1Dh8+XGb3FwA0b94ct27dQlZWltn2S5cuGe+Xb/V6PSIjI832i4iIMPtZHiGm0+kQFhZW6pe3t3e1HpvcpuK/W94m3y9r2bIlXnnlFfz99984d+4cCgoK8PHHH5vtc++99+Ldd9/F8ePHsXbtWpw/fx7r1q2rVjuJqGwMgIioVjg7O2Pp0qV4++23MWLEiDL3e/DBB6HT6fDFF1+Ybf/kk0+gUqmMI8nk2+KjyJYsWWL2s0ajwbhx4/DLL7/g3LlzJX5fUlJSVR6Ome7du8Pb2xvLli0z66raunUrLl68aByZlpubi7y8PLNjW7ZsCRcXF+NxaWlpJYb7d+nSBQDYDUZUi9gFRkS1pqwuKFMjRozAwIED8cYbbyAqKgohISH4+++/sWnTJrz00kvGmp8uXbpg4sSJ+Oqrr5CRkYH77rsPO3fuxNWrV0uc87333sPu3bsRGhqKGTNmoH379khNTcXJkyexY8cOpKamVutx2djY4P3338e0adPQv39/TJw40TgMPjAwEC+//DIA4PLlyxg0aBAeeeQRtG/fHlqtFr/99hsSEhLw6KOPAgDWrFmDr776CmPGjEHLli2RlZWF5cuXw9XVFQ8++GC12klEZWMARERWpVarsXnzZsybNw/r16/HqlWrEBgYiA8//BCvvPKK2b4rV66El5cX1q5di40bN+L+++/HH3/8gYCAALP9fHx8cPToUSxcuBC//vorvvrqKzRu3BgdOnTA+++/XyPtfvzxx+Ho6Ij33nsPr776KpycnDBmzBi8//77xnqngIAATJw4ETt37sR3330HrVaL4OBg/PTTTxg3bhwAUQR99OhRrFu3DgkJCXBzc0PPnj2xdu1aBAUF1UhbiagklVQ890pERERUz7EGiIiIiBocBkBERETU4DAAIiIiogaHARARERE1OAyAiIiIqMFhAEREREQNDucBKoVer8etW7fg4uIClUpl7eYQERFRBUiShKysLPj7+0OtLj/HwwCoFLdu3SoxsRoRERHVDTExMWjatGm5+zAAKoWLiwsAcQFdXV2t3BoiIiKqiMzMTAQEBBjfx8vDAKgUcreXq6srAyAiIqI6piLlKyyCJiIiogaHARARERE1OAyAiIiIqMFhDVA16HQ6FBYWWrsZdZatre0dhykSERHVBgZAVSBJEuLj45Genm7tptRparUaQUFBsLW1tXZTiIiogWEAVAVy8OPt7Q1HR0dOllgF8mSTcXFxaNasGa8hERFZFAOgStLpdMbgp3HjxtZuTp3m5eWFW7duoaioCDY2NtZuDhERNSAswKgkuebH0dHRyi2p++SuL51OZ+WWEBFRQ8MAqIrYZVN9vIZERGQtDICIiIiowWEARFUWGBiIJUuWWLsZRERElcYAqAFQqVTlfr399ttVOu+xY8fw1FNP1WxjiYiILICjwCxIp9dDp5egVqmg1Vgu9oyLizN+v379esybNw8RERHGbc7OzsbvJUmCTqeDVnvnp4aXl1fNNpSIiMhCmAGyoJTsAlyKz0J8Zp5Ff6+vr6/xy83NDSqVyvjzpUuX4OLigq1bt6Jbt26ws7PD/v37ERkZiVGjRsHHxwfOzs7o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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tGUIoYzwgQDM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1d0654cc-7799-4961-82f5-9c49477ea241"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2715/2715 [==============================] - 4s 2ms/step\n",
            "building_id,damage_grade\n",
            "300051,2\n",
            "99355,1\n",
            "890251,1\n",
            "745817,1\n",
            "421793,2\n",
            "871976,1\n",
            "691228,1\n",
            "896100,2\n",
            "343471,1\n"
          ]
        }
      ],
      "source": [
        "#make predicitions and set to submission format\n",
        "\n",
        "y_submit_pred = saved_model.predict(x_comp_test)\n",
        "\n",
        "\n",
        "#Converting predictions to label\n",
        "submit_pred = list()\n",
        "for i in range(len(y_submit_pred)):\n",
        "    submit_pred.append(np.argmax(y_submit_pred[i]))\n",
        "\n",
        "\n",
        "submission_format = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/data/submission_format.csv', index_col='building_id')\n",
        "my_submission = pd.DataFrame(data=submit_pred,\n",
        "                             columns=submission_format.columns,\n",
        "                             index=submission_format.index)\n",
        "\n",
        "my_submission.to_csv('/content/drive/MyDrive/Colab Notebooks/data/submission.csv')\n",
        "!head '/content/drive/MyDrive/Colab Notebooks/data/submission.csv'"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "gpuClass": "standard"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}